name: Salesforce Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'force-app/**'
      - 'package.json'
      - 'eslint.config.mjs'
      - 'pmdRuleset.xml'

concurrency:
  group: 'salesforce-validation'
  cancel-in-progress: false     

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package.json') }}

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm install
          npm shrinkwrap  # Creates npm-shrinkwrap.json for future cache hits

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            force-app/**

      - name: Run ESLint
        if: steps.changed-files.outputs.any_changed == 'true'
        id: eslint
        continue-on-error: true
        run: |
          echo "All changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          
          CHANGED_JS_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep "\.js$" | grep -v "meta\.xml$" || true)
          echo "Found JS files:"
          echo "$CHANGED_JS_FILES"
          
          if [ ! -z "$CHANGED_JS_FILES" ]; then
            echo "Running ESLint on: $CHANGED_JS_FILES"
            npx eslint $CHANGED_JS_FILES --format ./node_modules/eslint-formatter-pretty/index.js 2>&1 | tee eslint_report.txt || true
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "ESLINT_FAILED=true" >> $GITHUB_ENV
              echo "ESLint found issues"
            fi
          else
            echo "No JS files to lint" > eslint_report.txt
          fi

      - name: Setup Java
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache PMD
        if: steps.changed-files.outputs.any_changed == 'true'
        id: cache-pmd
        uses: actions/cache@v4
        with:
          path: pmd-bin
          key: ${{ runner.os }}-pmd-7.9.0

      - name: Download PMD
        if: steps.changed-files.outputs.any_changed == 'true' && steps.cache-pmd.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.9.0/pmd-dist-7.9.0-bin.zip
          unzip pmd-dist-7.9.0-bin.zip
          mv pmd-bin-7.9.0 pmd-bin

      - name: Run PMD
        if: steps.changed-files.outputs.any_changed == 'true'
        id: pmd
        continue-on-error: true
        run: |
          echo "All changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          
          CHANGED_APEX_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E "\.(cls|trigger|page)$" | grep -v "meta\.xml$" || true)
          echo "Found Apex files:"
          echo "$CHANGED_APEX_FILES"
          
          if [ ! -z "$CHANGED_APEX_FILES" ]; then
            echo "Running PMD on: $CHANGED_APEX_FILES"
            ./pmd-bin/bin/pmd check \
              -d "$CHANGED_APEX_FILES" \
              -R pmdRuleset.xml \
              -f text \
              --force-language apex \
              --fail-on-violation \
              2>&1 | node -e '
              const input = require("fs").readFileSync(0, "utf-8");
              const lines = input.split("\n");
              let currentFile = "";
              let output = "";
              
              lines.forEach(line => {
                if (line.trim() === "") return;
                
                // Check if this is a file path line
                if (line.includes("force-app/")) {
                  currentFile = line.split("/").pop();
                  output += `\n${currentFile}:\n`;
                  return;
                }
                
                // Parse violation lines
                const match = line.match(/Priority: (\d+)\s+?(.*)/);
                if (match) {
                  const [_, priority, message] = match;
                  const lineMatch = message.match(/line (\d+), column (\d+)/);
                  const ruleMatch = message.match(/\((.*?)\)/);
                  
                  if (lineMatch && ruleMatch) {
                    const [__, lineNum, colNum] = lineMatch;
                    const rule = ruleMatch[1];
                    const description = message.split(")").slice(1).join(")").trim();
                    
                    output += `${priority === "1" ? "Error" : "Warning"} - ${lineNum}:${colNum} => ${rule}  ${description}\n`;
                  }
                }
              });
              
              if (output.trim()) {
                console.log(output.trim());
              } else {
                console.log("No issues found");
              }
              ' | tee pmd_report.txt || true
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "PMD_FAILED=true" >> $GITHUB_ENV
              echo "PMD found issues"
            fi
          else
            echo "No Apex files to analyze" > pmd_report.txt
          fi

      - name: Install sfdx-git-delta plugin
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Installing sfdx-git-delta plugin..."
          echo y | npx sf plugins install sfdx-git-delta

      - name: Generate delta package
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "Comparing changes with target branch: $TARGET_BRANCH"
          npx sf sgd source delta \
            --to HEAD \
            --from "origin/$TARGET_BRANCH" \
            --output . \
            --source-dir force-app \
            --generate-delta

          if [ ! -f "package/package.xml" ]; then
            echo "No package.xml generated - no metadata changes detected"
            exit 0
          fi
          echo "Generated package.xml contents:"
          cat package/package.xml

      - name: Authenticate to Salesforce
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "${{ secrets.SFDX_AUTH_URL }}" > ./authfile
          npx sf org login sfdx-url -f ./authfile -a validation-org
          rm ./authfile
          
      - name: Deploy to validation org
        if: steps.changed-files.outputs.any_changed == 'true'
        id: deploy
        continue-on-error: true
        run: |
          echo "Starting deployment validation..."
          
          # Single deployment with all changes
          npx sf project deploy validate \
            --manifest package/package.xml \
            --pre-destructive-changes destructiveChanges/destructiveChangesPre.xml \
            --post-destructive-changes destructiveChanges/destructiveChangesPost.xml \
            --test-level RunLocalTests \
            --target-org validation-org \
            --json > deploy_report.json 2>&1 || {
              echo "DEPLOY_FAILED=true" >> $GITHUB_ENV
              echo "Deployment validation failed"
            }
          
          # Debug output
          echo "Deploy report content:"
          cat deploy_report.json

      - name: Create PR Comment
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '<h2>üîç Salesforce Validation Results</h2>\n\n';
            
            // Quick Summary at the top
            comment += '### üìä Summary\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            
            // ESLint Summary
            const hasEslintIssues = process.env.ESLINT_FAILED === 'true';
            let eslintOutput;
            try {
              eslintOutput = fs.readFileSync('eslint_report.txt', 'utf8').trim();
            } catch (e) {
              eslintOutput = 'No JavaScript files checked';
            }
            comment += `| ESLint | ${hasEslintIssues ? '‚ö†Ô∏è Issues found' : '‚ú® Clean'} |\n`;
            
            // PMD Summary
            const hasPmdIssues = process.env.PMD_FAILED === 'true';
            let pmdOutput;
            try {
              pmdOutput = fs.readFileSync('pmd_report.txt', 'utf8').trim();
            } catch (e) {
              pmdOutput = 'No Apex files analyzed';
            }
            comment += `| PMD | ${hasPmdIssues ? '‚ö†Ô∏è Issues found' : '‚ú® Clean'} |\n`;
            
            // Deployment Summary
            const hasDeployIssues = process.env.DEPLOY_FAILED === 'true';
            let deployResult;
            try {
              const deployContent = fs.readFileSync('deploy_report.json', 'utf8');
              deployResult = JSON.parse(deployContent);
              const isError = deployResult.name === 'FailedValidationError';
              comment += `| Deployment | ${isError ? '‚ùå Failed' : '‚úÖ Ready'} |\n\n`;
            } catch (e) {
              comment += '| Deployment | ‚ùå Error parsing results |\n\n';
            }
            
            // Detailed Results
            comment += '<details><summary><h3>üìù Detailed Results</h3></summary>\n\n';
            
            // ESLint Details
            if (hasEslintIssues) {
              comment += '<details><summary><b>üîç ESLint Issues</b></summary>\n\n';
              comment += '```\n' + eslintOutput + '\n```\n</details>\n\n';
            }
            
            // PMD Details
            if (hasPmdIssues) {
              comment += '<details><summary><b>üîç PMD Issues</b></summary>\n\n';
              comment += '```\n' + pmdOutput + '\n```\n</details>\n\n';
            }
            
            // Deployment Details
            if (deployResult) {
              comment += '<details><summary><b>üöÄ Deployment Validation</b></summary>\n\n';
              
              if (deployResult.name === 'FailedValidationError') {
                // Format validation error
                comment += '### ‚ùå Validation Errors\n\n';
                
                // Extract component errors from message
                const errors = deployResult.message
                  .split('Due To:\n')[1]
                  .split('\n\n')[0]
                  .split('\n')
                  .filter(line => line.trim());
                  
                errors.forEach(error => {
                  const [component, ...messageParts] = error.split(' - ');
                  const message = messageParts.join(' - ');
                  comment += `**${component}**\n`;
                  comment += `\`\`\`\n${message}\n\`\`\`\n\n`;
                });
                
                // Deployment Info
                comment += '### üìã Deployment Information\n\n';
                comment += `- **Deploy ID**: \`${deployResult.data.deployId}\`\n`;
                comment += `- **Status**: Failed\n`;
                comment += `- **Error Type**: ${deployResult.name}\n`;
                
                if (deployResult.warnings?.length > 0) {
                  comment += '\n### ‚ö†Ô∏è Warnings\n\n';
                  deployResult.warnings.forEach(warning => {
                    comment += `- ${warning}\n`;
                  });
                }
              } else {
                // Handle successful validation
                comment += '### ‚úÖ Validation Succeeded\n\n';
                comment += `- **Deploy ID**: \`${deployResult.result?.id || 'N/A'}\`\n`;
                comment += `- **Status**: Success\n`;
              }
              
              comment += '</details>\n\n';
            }
            
            comment += '</details>\n\n';
            
            // Final Status
            const allPassed = !hasEslintIssues && !hasPmdIssues && !hasDeployIssues;
            comment += '---\n';
            if (allPassed) {
              comment += '### ‚úÖ All checks passed successfully!\n';
              comment += '> Ready to be merged üöÄ\n';
            } else {
              comment += '### ‚ùå Some checks failed\n';
              comment += '> Please review the details above and fix the issues ‚ö†Ô∏è\n';
            }
            
            // Post comment
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });

      - name: Check for failures
        if: always() && steps.changed-files.outputs.any_changed == 'true'
        run: |
          if [ "${{ env.ESLINT_FAILED }}" = "true" ] || \
             [ "${{ env.PMD_FAILED }}" = "true" ] || \
             [ "${{ env.DEPLOY_FAILED }}" = "true" ]; then
            echo "Validation failed!"
            exit 1
          fi