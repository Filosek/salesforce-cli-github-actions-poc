name: Salesforce Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'force-app/**'
      - 'package.json'
      - 'eslint.config.mjs'
      - 'pmdRuleset.xml'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and create lock file
        run: npm install

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            force-app/**

      - name: Run ESLint
        if: steps.changed-files.outputs.any_changed == 'true'
        id: eslint
        continue-on-error: true
        run: |
          echo "All changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          
          CHANGED_JS_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep "\.js$" | grep -v "meta\.xml$" || true)
          echo "Found JS files:"
          echo "$CHANGED_JS_FILES"
          
          if [ ! -z "$CHANGED_JS_FILES" ]; then
            echo "Running ESLint on: $CHANGED_JS_FILES"
            npx eslint $CHANGED_JS_FILES --format stylish 2>&1 | tee eslint_report.txt || true
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "ESLINT_FAILED=true" >> $GITHUB_ENV
              echo "ESLint found issues"
            fi
          else
            echo "No JS files to lint" > eslint_report.txt
          fi

      - name: Setup Java
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache PMD
        if: steps.changed-files.outputs.any_changed == 'true'
        id: cache-pmd
        uses: actions/cache@v4
        with:
          path: pmd-bin
          key: ${{ runner.os }}-pmd-7.9.0

      - name: Download PMD
        if: steps.changed-files.outputs.any_changed == 'true' && steps.cache-pmd.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.9.0/pmd-dist-7.9.0-bin.zip
          unzip pmd-dist-7.9.0-bin.zip
          mv pmd-bin-7.9.0 pmd-bin

      - name: Run PMD
        if: steps.changed-files.outputs.any_changed == 'true'
        id: pmd
        continue-on-error: true
        run: |
          echo "All changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          
          CHANGED_APEX_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E "\.(cls|trigger|page)$" | grep -v "meta\.xml$" || true)
          echo "Found Apex files:"
          echo "$CHANGED_APEX_FILES"
          
          if [ ! -z "$CHANGED_APEX_FILES" ]; then
            echo "Running PMD on: $CHANGED_APEX_FILES"
            ./pmd-bin/bin/pmd check \
              -d "$CHANGED_APEX_FILES" \
              -R pmdRuleset.xml \
              -f text \
              --force-language apex \
              --fail-on-violation \
              2>&1 | tee pmd_report.txt || true
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "PMD_FAILED=true" >> $GITHUB_ENV
              echo "PMD found issues"
            fi
          else
            echo "No Apex files to analyze" > pmd_report.txt
          fi

      - name: Cache SF CLI plugins
        uses: actions/cache@v4
        id: sf-plugins-cache
        with:
          path: |
            ~/.local/share/sfdx
            ~/.sf
          key: ${{ runner.os }}-sf-plugins-${{ hashFiles('package.json') }}

      - name: Install sfdx-git-delta
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          if ! npx sf plugins list | grep sfdx-git-delta > /dev/null; then
            echo "Installing sfdx-git-delta plugin..."
            echo y | npx sf plugins install sfdx-git-delta
          else
            echo "Using cached sfdx-git-delta plugin"
          fi

      - name: Generate delta package
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "Comparing changes with target branch: $TARGET_BRANCH"
          npx sf sgd source delta \
            --to HEAD \
            --from "origin/$TARGET_BRANCH" \
            --output . \
            --source-dir force-app \
            --generate-delta
          
          if [ ! -f "package/package.xml" ]; then
            echo "No package.xml generated - no metadata changes detected"
            exit 0
          fi
          echo "Generated package.xml contents:"
          cat package/package.xml

      - name: Authenticate to Salesforce
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "${{ secrets.SFDX_AUTH_URL }}" > ./authfile
          npx sf org login sfdx-url -f ./authfile -a validation-org
          rm ./authfile
          
      - name: Deploy to validation org
        if: steps.changed-files.outputs.any_changed == 'true'
        id: deploy
        continue-on-error: true
        run: |
          echo "Starting deployment validation..."
          npx sf project deploy validate \
            --manifest package/package.xml \
            --test-level RunLocalTests \
            --target-org validation-org \
            --verbose > deploy_report.txt 2>&1 || {
              echo "DEPLOY_FAILED=true" >> $GITHUB_ENV
              echo "Deployment validation failed"
            }

      - name: Create PR Comment
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## Salesforce Validation Results\n\n';
            
            // ESLint Results
            comment += '### ESLint Results\n```\n';
            try {
              const eslintOutput = fs.readFileSync('eslint_report.txt', 'utf8').trim();
              comment += eslintOutput || 'No issues found';
            } catch (e) {
              comment += 'No JavaScript files checked';
            }
            comment += '\n```\n\n';
            
            // PMD Results
            comment += '### PMD Analysis\n```\n';
            try {
              const pmdOutput = fs.readFileSync('pmd_report.txt', 'utf8').trim();
              comment += pmdOutput || 'No issues found';
            } catch (e) {
              comment += 'No Apex files analyzed';
            }
            comment += '\n```\n\n';
            
            // Deployment Results
            comment += '### Deployment Validation\n```\n';
            try {
              const deployOutput = fs.readFileSync('deploy_report.txt', 'utf8').trim();
              comment += deployOutput;
            } catch (e) {
              comment += 'No deployment performed';
            }
            comment += '\n```\n\n';
            
            // Summary
            comment += '### Summary\n';
            comment += `- ESLint: ${process.env.ESLINT_FAILED ? '❌' : '✅'}\n`;
            comment += `- PMD: ${process.env.PMD_FAILED ? '❌' : '✅'}\n`;
            comment += `- Deployment: ${process.env.DEPLOY_FAILED ? '❌' : '✅'}\n`;
            
            // Post comment
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });

      - name: Check for failures
        if: always() && steps.changed-files.outputs.any_changed == 'true'
        run: |
          if [ "${{ env.ESLINT_FAILED }}" = "true" ] || \
             [ "${{ env.PMD_FAILED }}" = "true" ] || \
             [ "${{ env.DEPLOY_FAILED }}" = "true" ]; then
            echo "Validation failed!"
            exit 1
          fi