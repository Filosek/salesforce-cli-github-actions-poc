name: Salesforce Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'force-app/**'
      - 'package.json'
      - 'eslint.config.mjs'
      - 'pmdRuleset.xml'

concurrency:
  group: 'salesforce-validation'
  cancel-in-progress: false     

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: node-modules-cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - installing dependencies"
          npm ci

      - name: Save node_modules cache
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package.json', 'package-lock.json') }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            force-app/**

      - name: Run ESLint
        if: steps.changed-files.outputs.any_changed == 'true'
        id: eslint
        continue-on-error: true
        run: |
          CHANGED_JS_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep "\.js$" | grep -v "meta\.xml$" || true)
          if [ ! -z "$CHANGED_JS_FILES" ]; then
            echo "Running ESLint on: $CHANGED_JS_FILES"
            npx eslint $CHANGED_JS_FILES --format json | node -e '
              const results = JSON.parse(require("fs").readFileSync(0, "utf-8"));
              
              const violations = results.flatMap(result => {
                const fileName = result.filePath.split("/").pop();
                return result.messages.map(msg => ({
                  file: fileName,
                  line: msg.line,
                  column: msg.column,
                  rule: msg.ruleId,
                  description: msg.message
                }));
              });
              
              if (violations.length > 0) {
                console.log("| File | Line | Column | Rule | Description |");
                console.log("|------|------|--------|------|-------------|");
                violations.forEach(v => {
                  console.log(`| ${v.file} | ${v.line} | ${v.column} | ${v.rule} | ${v.description} |`);
                });
                console.log(`\n‚úñ ${violations.length} ${violations.length === 1 ? "problem" : "problems"}`);
              } else {
                console.log("No ESLint issues found");
              }
            ' | tee eslint_report.txt || true
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "ESLINT_FAILED=true" >> $GITHUB_ENV
            fi
          else
            echo "No JS files to lint" > eslint_report.txt
          fi

      - name: Setup Java
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache PMD
        if: steps.changed-files.outputs.any_changed == 'true'
        id: cache-pmd
        uses: actions/cache@v4
        with:
          path: pmd-bin
          key: ${{ runner.os }}-pmd-7.9.0

      - name: Download PMD
        if: steps.changed-files.outputs.any_changed == 'true' && steps.cache-pmd.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.9.0/pmd-dist-7.9.0-bin.zip
          unzip pmd-dist-7.9.0-bin.zip
          mv pmd-bin-7.9.0 pmd-bin

      - name: Run PMD
        if: steps.changed-files.outputs.any_changed == 'true'
        id: pmd
        continue-on-error: true
        run: |
          CHANGED_APEX_FILES=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E "\.(cls|trigger|page)$" | grep -v "meta\.xml$" || true)
          if [ ! -z "$CHANGED_APEX_FILES" ]; then
            echo "Running PMD on: $CHANGED_APEX_FILES"
            ./pmd-bin/bin/pmd check \
              -d "$CHANGED_APEX_FILES" \
              -R pmdRuleset.xml \
              -f json \
              --force-language apex \
              2>&1 | node -e '
                const input = require("fs").readFileSync(0, "utf-8");
                try {
                  const result = JSON.parse(input);
                  
                  // Collect all violations
                  const violations = result.files.flatMap(file => {
                    const fileName = file.filename.split("/").pop();
                    return file.violations.map(v => ({
                      file: fileName,
                      line: v.beginline,
                      rule: v.rule,
                      description: v.description,
                      priority: v.priority
                    }));
                  });
                  
                  // Store priorities in a separate file for severity counting
                  const priorities = violations.map(v => v.priority);
                  require("fs").writeFileSync("pmd_priorities.json", JSON.stringify(priorities));
                  
                  if (violations.length > 0) {
                    console.log("| Class | Line | Rule | Description |");
                    console.log("|-------|------|------|-------------|");
                    violations.forEach(v => {
                      console.log(`| ${v.file} | ${v.line} | ${v.rule} | ${v.description} |`);
                    });
                  }
                } catch (e) {
                  console.error("Error processing PMD output:", e);
                  require("fs").writeFileSync("pmd_priorities.json", "[]");
                }
              ' | tee pmd_report.txt || true
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              echo "PMD_FAILED=true" >> $GITHUB_ENV
            fi
          else
            echo "[]" > pmd_priorities.json
          fi

      - name: Install sfdx-git-delta plugin
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Installing sfdx-git-delta plugin..."
          echo y | npx sf plugins install sfdx-git-delta

      - name: Generate delta package
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "Comparing changes with target branch: $TARGET_BRANCH"
          npx sf sgd source delta \
            --to HEAD \
            --from "origin/$TARGET_BRANCH" \
            --output . \
            --source-dir force-app \
            --generate-delta

          if [ ! -f "package/package.xml" ]; then
            echo "No package.xml generated - no metadata changes detected"
            exit 0
          fi
          echo "Generated package.xml contents:"
          cat package/package.xml

      - name: Authenticate to Salesforce
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "${{ secrets.SFDX_AUTH_URL }}" > ./authfile
          npx sf org login sfdx-url -f ./authfile -a validation-org
          rm ./authfile
          
      - name: Deploy to validation org
        if: steps.changed-files.outputs.any_changed == 'true'
        id: deploy
        continue-on-error: true
        run: |
          echo "Starting deployment validation..."
          
          # Single deployment with all changes
          npx sf project deploy validate \
            --manifest package/package.xml \
            --pre-destructive-changes destructiveChanges/destructiveChangesPre.xml \
            --post-destructive-changes destructiveChanges/destructiveChangesPost.xml \
            --test-level RunLocalTests \
            --target-org validation-org \
            --json > deploy_report.json 2>&1 || {
              echo "DEPLOY_FAILED=true" >> $GITHUB_ENV
              echo "Deployment validation failed"
            }
          
          # Debug output
          echo "Deploy report content:"
          cat deploy_report.json

      - name: Create PR Comment
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '<h2>üîç Salesforce Validation Results</h2>\n\n';
            
            // Parse ESLint results for severity counts
            let eslintCritical = 0;
            let eslintWarnings = 0;
            try {
              const eslintOutput = fs.readFileSync('eslint_report.txt', 'utf8').trim();
              if (eslintOutput !== 'No JS files to lint' && eslintOutput !== 'No ESLint issues found') {
                const lines = eslintOutput.split('\n');
                lines.slice(2, -2).forEach(line => {
                  const parts = line.split('|').map(p => p.trim());
                  if (parts.length >= 5) {
                    if (parts[4].startsWith('error:')) eslintCritical++;
                    if (parts[4].startsWith('warning:')) eslintWarnings++;
                  }
                });
              }
            } catch (e) {
              console.error('Error parsing ESLint output:', e);
            }

            // Parse PMD results for severity counts
            let pmdCritical = 0;
            let pmdWarnings = 0;
            try {
              const pmdPriorities = JSON.parse(fs.readFileSync('pmd_priorities.json', 'utf8'));
              pmdCritical = pmdPriorities.filter(p => p <= 2).length;
              pmdWarnings = pmdPriorities.filter(p => p > 2).length;
            } catch (e) {
              console.error('Error parsing PMD priorities:', e);
            }

            // Add severity summary diagram - moved before the main summary
            const totalCritical = eslintCritical + pmdCritical;
            const totalWarnings = eslintWarnings + pmdWarnings;
            
            if (totalCritical > 0 || totalWarnings > 0) {
              comment += '### üìä Issues Severity\n\n';
              comment += '```mermaid\npie\n';
              comment += '    title Issues Distribution\n';
              comment += `    "Critical (${totalCritical})" : ${totalCritical}\n`;
              comment += `    "Warnings (${totalWarnings})" : ${totalWarnings}\n`;
              comment += '    %%{init: {"pie": {"colorScheme": ["#ff0000", "#ffa500"]}} }%%\n';
              comment += '```\n\n';
              
              comment += '| Tool | Critical | Warnings |\n';
              comment += '|------|----------|----------|\n';
              comment += `| ESLint | ${eslintCritical} | ${eslintWarnings} |\n`;
              comment += `| PMD | ${pmdCritical} | ${pmdWarnings} |\n\n`;
            }
            
            // Quick Summary at the top
            comment += '### üìä Summary\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            
            // ESLint Summary
            const hasEslintIssues = process.env.ESLINT_FAILED === 'true';
            let eslintOutput;
            try {
              eslintOutput = fs.readFileSync('eslint_report.txt', 'utf8').trim();
            } catch (e) {
              eslintOutput = 'No JavaScript files checked';
            }
            comment += `| ESLint | ${hasEslintIssues ? '‚ö†Ô∏è Issues found' : '‚ú® Clean'} |\n`;
            
            // PMD Summary
            const hasPmdIssues = process.env.PMD_FAILED === 'true';
            let pmdOutput;
            try {
              pmdOutput = fs.readFileSync('pmd_report.txt', 'utf8').trim();
            } catch (e) {
              pmdOutput = 'No Apex files analyzed';
            }
            comment += `| PMD | ${hasPmdIssues ? '‚ö†Ô∏è Issues found' : '‚ú® Clean'} |\n`;
            
            // Deployment Summary
            const hasDeployIssues = process.env.DEPLOY_FAILED === 'true';
            let deployResult;
            try {
              const deployContent = fs.readFileSync('deploy_report.json', 'utf8');
              deployResult = JSON.parse(deployContent);
              const isError = deployResult.name === 'FailedValidationError';
              comment += `| Deployment | ${isError ? '‚ùå Failed' : '‚úÖ Ready'} |\n\n`;
            } catch (e) {
              comment += '| Deployment | ‚ùå Error parsing results |\n\n';
            }
            
            // Detailed Results
            comment += '<details><summary><h3>üìù Detailed Results</h3></summary>\n\n';
            
            // ESLint Details
            if (hasEslintIssues) {
              comment += '<details><summary><b>üîç ESLint Issues</b></summary>\n\n';
              comment += '\n' + eslintOutput + '\n\n</details>\n\n';
            }
            
            // PMD Details
            if (hasPmdIssues) {
              comment += '<details><summary><b>üîç PMD Issues</b></summary>\n\n';
              comment += '\n' + pmdOutput + '\n\n</details>\n\n';
            }
            
            // Deployment Details
            if (deployResult) {
              comment += '<details><summary><b>üöÄ Deployment Validation</b></summary>\n\n';
              
              if (deployResult.name === 'FailedValidationError') {
                // Format validation error
                comment += '### ‚ùå Validation Errors\n\n';
                
                // Extract component errors from message
                const errors = deployResult.message
                  .split('Due To:\n')[1]
                  .split('\n\n')[0]
                  .split('\n')
                  .filter(line => line.trim());
                  
                errors.forEach(error => {
                  const [component, ...messageParts] = error.split(' - ');
                  const message = messageParts.join(' - ');
                  comment += `**${component}**\n`;
                  comment += `\`\`\`\n${message}\n\`\`\`\n\n`;
                });
                
                // Deployment Info
                comment += '### üìã Deployment Information\n\n';
                comment += `- **Deploy ID**: \`${deployResult.data.deployId}\`\n`;
                comment += `- **Status**: Failed\n`;
                comment += `- **Error Type**: ${deployResult.name}\n`;
                
                if (deployResult.warnings?.length > 0) {
                  comment += '\n### ‚ö†Ô∏è Warnings\n\n';
                  deployResult.warnings.forEach(warning => {
                    comment += `- ${warning}\n`;
                  });
                }
              } else {
                // Handle successful validation
                comment += '### ‚úÖ Validation Succeeded\n\n';
                comment += `- **Deploy ID**: \`${deployResult.result?.id || 'N/A'}\`\n`;
                comment += `- **Status**: Success\n`;
              }
              
              comment += '</details>\n\n';
            }
            
            comment += '</details>\n\n';
            
            // Final Status - only consider deployment status
            const allPassed = !hasDeployIssues;  // Remove ESLint and PMD from final status
            comment += '---\n';
            if (allPassed) {
              comment += '### ‚úÖ Deployment validation passed!\n';
              comment += '> Ready to be merged üöÄ\n';
            } else {
              comment += '### ‚ùå Deployment validation failed\n';
              comment += '> Please review the deployment issues above ‚ö†Ô∏è\n';
            }
            
            // Post comment
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });

      - name: Check validation status
        if: always() && steps.changed-files.outputs.any_changed == 'true'
        run: |
          if [ "${{ env.DEPLOY_FAILED }}" = "true" ]; then
            echo "Deployment validation failed!"
            exit 1
          fi